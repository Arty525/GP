#pragma once
#include "convertJSON.h"
//#include "search_engine.h"
#include <map>
#include <fstream>
#include <vector>
#include <iostream>
#include <filesystem>
#include <thread>
#include <string>
#include <mutex>

struct Entry {
	size_t doc_id, count;
	// ƒанный оператор необходим дл€ проведени€ тестовых сценариев
	//bool operator ==(const Entry& other) const {
	//	return (doc_id == other.doc_id && count == other.count);
	//}
};
class InvertedIndex {
public:
	InvertedIndex() = default;
	/**
	* ќбновить или заполнить базу документов, по которой будем совершать
	поиск
	* @param texts_input содержимое документов
	*/
	void UpdateDocumentBase(std::vector<std::string> input_docs);
	/**
	* ћетод определ€ет количество вхождений слова word в загруженной базе
	документов
	* @param word слово, частоту вхождений которого необходимо определить
	* @return возвращает подготовленный список с частотой слов
	*/
	std::vector<Entry> GetWordCount(const std::string& word);
private:
	friend class SearchServer;
	std::vector<std::string> docs; // список содержимого документов
	std::map<std::string, std::vector<Entry>> freq_dictionary; // частотный	словарь
};
